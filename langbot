#!/usr/bin/nodejs

process.chdir(__dirname);

var fs = require('fs');
var util = require('util');
var cp = require('child_process')
require('./src/lib/utils.js')
var prompt = require('./src/lib/prompt.js');

/* INSTALL AND UPDATE */
var packages = require('./package.json').dependencies;
var me = this;
/*
fs.readdirSync('./src/modules/').forEach(function(n){
  var m = n.match(/^(\w+)\.packages\.json$/);
  if (!m) return;
  var p = request('./src/modules/'+n);
  for (var i in p) packages[i] = p[i];
})
*/

var readdir = fs.readdirSync;
var writeFile = fs.writeFileSync;
var exists = fs.existsSync;
var readFile = fs.readFileSync;
var unlink = fs.unlinkSync;
var ls = function(path) {
  var steps = path.split('/');
  if (steps[steps.length-1].match(/[*?]/)) var glob = steps.pop();
  path = steps.join('/');
  var files = readdir(path);
  if (!glob) return files;
  
  var re = RegExp.fromGlob(glob);
  return files.map(function(n) {
    return n.match(re);  
  })
  .filter(Boolean);
}
var print = function(str) {
  util.print(str);
  print.cur+=str.length;
}
print.cur = 0;

var println = function(str) { util.puts(str||''); print.cur = 0;}
var printat = function(at,str) { 
  if (at < print.cur) println();
  var p = "          " /*10*/; p=p+p+p+p /*40*/; p=p+p+p+p; /*160*/; p=p+p+p+p; /*640*/;
  p = p.substr(0,at-print.cur);
  print(p+str);
}
var printf = function() { print( util.format.apply(util,arguments)); }
var printfat = function(at) { printat( at, util.format.apply(util,Array.make(arguments).slice(1))); }

var shell = function(cmd,cb,text) {
  var child = cp.spawn('/bin/sh',['-c',cmd],{stdio:'inherit'});
  child.on('error',function(err) {
    println(err);
    exit();
  });
  child.on('close',function() {
    println(text||'done');
    cb();
  });
}

function install(cb) {
  var cmds = [];
  for (var i in packages) if (!exists('./node_modules/'+i)) cmds.push('/usr/bin/npm install '+i+'@'+packages[i]);
  if (cmds.length) {
    println('Installing missing packages.');
    shell(cmds.join(';\n'),cb,'Install done.');
  } else cb();
}  

function reinstall(cb) {
  var cmds = [];
  for (var i in packages) cmds.push('/usr/bin/npm install '+i);
  println('Reinstalling all packages.');
  if (cmds.length) {
    shell(cmds.join(';\n'),cb,'Reinstall done.');
  } else cb();
}  

function update(cb) {
  println('Updating packages:');
  var cmds = [];
  for (var i in packages) cmds.push('/usr/bin/npm update '+i);
  cmds.push('echo "Updating langbot:"');
  cmds.push('git pull');
  if (cmds.length) {
    shell(cmds.join(';\n'),cb,'Update done.');
  } else cb();
}

var cmd = process.argv[2];
var arg1 = process.argv[3];
var arg2 = process.argv[4];
var arg3 = process.argv[5];

/* START / STOP */

install(function() {
  
  var running = require('is-running');  

  function stop(name,cb)
   {
    var bot = bots[name];
    if (!bot) {
      printf('No such bot %s.\n',name);
      cb && cb(name);
      return;
    }    
    if (!bot.pid) {
      printf('Bot %s is not running.\n',name);
      cb && cb(name);
      return;
    }
    printf('Stopping %s:\n',name);
    process.kill(bot.pid,'SIGINT');
    var cnt = 0;
    var t = setInterval(function() {
      cnt++;
      printf('Waiting for %s...\n',name);
      var r = running(bot.pid);
      if (cnt == 20 || !r) {
        if (r) {
          printf('%s timed out. Will kill.\n',name);
          process.kill(bot.pid,'SIGHUP');
        } else {
          printf('Bot %s stopped. \n',name);
        }
        if (exists(bot.pidfile)) unlink(bot.pidfile);
        bot.pid = null;
        clearInterval(t);
        cb && cb(name);
      };
    },1000);
  }
  function start(name,cb) {
    var bot = bots[name];
    if (!bot) {
      printf('No such bot %s.\n',name);
      cb && cb(name);
      return;
    }    
    if (bot.pid) {
      printf('Bot %s is already running.\n',name);
      cb && cb(name);
      return;
    }
    printf('Starting %s:\n',name);
    require('daemon').daemon('./src/index.js',[name],{
      stdout: process.stdout,
      stderr: process.stderr,
    });

    var cnt = 0;
    var t = setInterval(function() {
      cnt++;
      printf('Waiting for %s...\n',name);
      var r = exists(bot.pidfile);
      if (cnt == 20 || r) {
        if (!r) {
          printf('%s timed out. Will kill.\n',name);
          process.kill(bot.pid,'SIGHUP');
        } else {
          printf('Bot %s started. \n',name);
        }
        if (r) bot.pid = Number(readFile(bot.pidfile));
        clearInterval(t);
        cb && cb(name);
      };
    },1000);
  }

  function exit() {
    println('Bye.');
    process.exit();
  }

  function status(cb) {
    println('--------------------------------------------------------------------------');
    println('Your bots:');
    println('--------------------------------------------------------------------------');
    
    for (var i in bots) {
      var b = bots[i];
      print(i);
      if (b.pid) {
        printfat(20,'[pid %d]',b.pid);
        printat (70,'LIVE');
      } else {
        printat(20,'[no pid file]');
        printat(70,'DEAD');
      }
      println('');
    } 
    println('--------------------------------------------------------------------------');
    println('\nusage: langbot [start|stop|restart] [bot_name], langbot update, langbot reinstall');
    cb && cb();
  }

  function config_list_default(cb) {
    var dconfig = require('./etc/config.default.json');
    var dsettings = undeepen(dconfig);
    
         
    for (var i in dsettings) {
      print(i); 
      printat(40,dsettings[i]);
      println();
    }
    
    prompt.object(dconfig,cb)
  }


  function config_list(name,cb) {
    var dconfig = require('./etc/config.default.json');
    var dsettings = undeepen(dconfig);
    
    var config = require(bots[name].conffile);
    var settings = undeepen(dconfig);
    
    for (var i in dsettings) {
      console.log(i); 
    }
    cb && cb(name);
  }

  var bots = {};
  ls('./etc/*.config.json')
  .forEach(function(n) {
    var name = n[1];
    var pidfile = './var/'+name+'.pid';
    var pid = exists(pidfile) && Number(readFile(pidfile));
    if (pid && !running(pid)) unlink(pidfile), pid = null;
    var b = bots[name] = {
      conf: './etc/'+name+'.config.json',
      state: './var/'+name+'.state.json',
      pidfile: pidfile,
      pid: pid
    }
  })


  if (!cmd) {
    status(exit);
  }

  function eachBot(fn,cb) {
    var cnt = 0;
    for (var i in bots) {
      cnt ++;
      fn(bots[i],i,function(){
        cnt--;
        !cnt && cb && cb();
      });
    }
    !cnt && cb && cb();
  }

  switch (cmd) {
  case 'set':
    if (!arg1) {
      config_list_default(arg1,exit);  
      break;
    }
    config_list(arg1,exit);
    break;
  case 'status':
    status(exit);
    break;
  case 'reinstall':
    reinstall(exit);
    break;
  case 'update':
    update(exit);
    break;
  case 'start':
  case 'summon':
    if (arg1) {
      start(arg1,exit);
    } else {
      eachBot(function(bot,i){
      if (bot.pid) return printf('%s is already LIVE. Skipping.\n',i);
        start(i);
      });
    }
    break;
  case 'stop':
  case 'kill':
    if (arg1) {
      stop(arg1,exit);
    } else {
      eachBot(function(bot,i){
        if (!bot.pid) return printf('%s is already DEAD. Skipping.\n',i);
        stop(i);
      });
    }
    break;
  case 'restart':
  case 'reincarnate':
    if (arg1) {
      stop(arg1,function() {
        start(arg1,exit);
      });
    } else {
      eachBot(function(bot,i){
        if (!bot.pid) return printf('%s is DEAD. Skipping.\n',i);
        stop(i,function() {
          start(i,exit);
        });
      });
    }
    break;
  default:
    console.error('usage: langbot start|stop|restart [bot_name]');
  }
});
